{"version":3,"sources":["src/index.es6"],"names":[],"mappings":";;;;;;;;;;;;;IAOM,UAAU;;;;;;;;;AAQJ,UARN,UAAU,CAQH,CAAC,EAAE;wBARV,UAAU;;AASd,MAAI,CAAC,KAAK,GAAG,CAAC,UAAS,CAAC,EAAE;AACzB,UAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;GACd,CAAA,CAAE,CAAC,CAAC,CAAA;AACL,MAAI,CAAC,GAAG,GAAG,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,CAAA;AACtD,MAAI,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,CAAA;AAC3C,MAAI,CAAC,KAAK,GAAG;AACZ,WAAQ,EAAE;AACT,QAAI,EAAE;AACL,OAAE,EAAE,aAAa;AACjB,OAAE,EAAE,MAAM;AACV,WAAI,QAAQ;AACZ,OAAE,EAAE,YAAY;AAChB,MAAC,EAAE,QAAQ;AACX,OAAE,EAAE,OAAO;AACX,OAAE,EAAE,aAAa;AACjB,OAAE,EAAE,OAAO;KACX;AACD,QAAI,EAAE;AACL,aAAQ,EAAE,EAAE;AACZ,aAAQ,EAAE,MAAM;AAChB,YAAO,EAAE,MAAM;KACf;AACD,UAAM,EAAE;AACP,WAAM,EAAE,MAAM;KACd;AACD,UAAM,EAAE;AACP,WAAM,EAAE,MAAM;KACd;AACD,SAAK,EAAE;AACN,WAAM,EAAE,CAAC;KACT;IACD;GACD,CAAA;AACD,MAAI,CAAC,IAAI,GAAG;AACX,iBAAc,EAAE,UAAU;GAC1B,CAAA;EACD;;cA7CI,UAAU;;SA8CT,kBAA2C;OAA1C,GAAG,yDAAC,IAAI,CAAC,GAAG;OAAE,IAAI,yDAAC,IAAI,CAAC,IAAI;OAAE,OAAO,yDAAC,EAAE;;AAC9C,OAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,MAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,MAAI,IAAI,CAAC,IAAI,CAAG,CAAG,CAAA;AAC9E,OAAI,OAAO,CAAA;AACX,WAAO,IAAI;AACV,SAAK,IAAI;AACR,YAAO,GAAG,GAAG,GAAC,KAAK,CAAC,MAAM,CAAA;AAC1B,WAAM;AAAA,IACP;AACD,UAAO,GAAG,OAAO,CAAC,MAAM,GAAG,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;AACxD,UAAO,OAAO,CAAA;GACd;;;SACG,gBAAG;AACN,UAAO,CAAC,GAAG,CAAC;AACX,UAAM,EAAE,IAAI,CAAC,GAAG;AAChB,QAAI,EAAE,IAAI,CAAC,IAAI;IACf,CAAC,CAAA;GACF;;;QA9DI,UAAU;;;AAkEhB,IAAI,OAAO,GAAG,SAAV,OAAO,CAAI,CAAC;QAAK,IAAI,UAAU,CAAC,CAAC,CAAC;CAAA,CAAA;;AAEtC,MAAM,CAAC,OAAO,GAAG;AACf,QAAO,EAAE,OAAO;CACjB,CAAA","file":"index.util.js","sourcesContent":["// Utilities Index\n\n/**\n * All values are multipliers; given that\n * 1 [parent name unit] === 1 [property name unit]\n */\n\nclass Conversion {\n\t/**\n\t * [constructor description]\n\t * @param  {string} input Containers numeric value and \n\t *                        \tunit to be converted, delimited\n\t *                        \tby a space.\n\t * @return {object}       Class object\n\t */\n\tconstructor(i) {\n\t\tthis.check = (function(i) {\n\t\t\tconsole.log(i)\n\t\t})(i)\n\t\tthis.num = i ? parseFloat(i.split(' ')[0]) : undefined\n\t\tthis.unit = i ? i.split(' ')[1] : undefined\n\t\tthis.table = {\n\t\t\tdistance: {\n\t\t\t\tabbr: {\n\t\t\t\t\tcm: 'centimeters',\n\t\t\t\t\tft: 'feet',\n\t\t\t\t\tin: 'inches',\n\t\t\t\t\tkm: 'kilometers',\n\t\t\t\t\tm: 'meters',\n\t\t\t\t\tmi: 'miles',\n\t\t\t\t\tmm: 'millimeters',\n\t\t\t\t\tyd: 'yards'\n\t\t\t\t},\n\t\t\t\tfeet: {\n\t\t\t\t\ttoInches: 12,\n\t\t\t\t\ttoMeters: 0.3048, // eg 1ft === 0.3048m\n\t\t\t\t\ttoYards: 0.3333\n\t\t\t\t},\n\t\t\t\tinches: {\n\t\t\t\t\ttoFeet: 0.0833\n\t\t\t\t},\n\t\t\t\tmeters: {\n\t\t\t\t\ttoFeet: 3.2808\n\t\t\t\t},\n\t\t\t\tyards: {\n\t\t\t\t\ttoFeet: 3\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.info = {\n\t\t\tdefault_system: 'Imperial'\n\t\t}\n\t}\n\ttoFeet(num=this.num, unit=this.unit, options={}) {\n\t\tvar table = this.table.distance[`${this.table.distance.abbr[`${this.unit}`]}`]\n\t\tvar product\n\t\tswitch(unit) {\n\t\t\tcase 'in':\n\t\t\t\tproduct = num*table.toFeet\n\t\t\t\tbreak;\n\t\t}\n\t\tproduct = options.strict ? product : Math.round(product)\n\t\treturn product\n\t}\n\techo() {\n\t\tconsole.log({\n\t\t\tnumber: this.num,\n\t\t\tunit: this.unit\n\t\t})\n\t}\n\n}\n\nvar convert = (i) => new Conversion(i)\n\nmodule.exports = {\n  convert: convert\n}"]}